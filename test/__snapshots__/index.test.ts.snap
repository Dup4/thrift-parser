// Vitest Snapshot v1

exports[`Thrift Parser > load files 1`] = `"(typedeflist<i32>(cpp.template=\\"std::list\\")int_linked_liststructfoo{1:i32bar(presence=\\"required\\");2:i32baz(presence=\\"manual\\",cpp.use_pointer=\\"\\",);3:i32qux;4:i32bop;}(cpp.type=\\"DenseFoo\\",python.type=\\"DenseFoo\\",java.final=\\"\\",annotation.without.value,)exceptionfoo_error{1:i32error_code(foo=\\"bar\\")2:stringerror_msg}(foo=\\"bar\\")typedefstring(unicode.encoding=\\"UTF-16\\")non_latin_string(foo=\\"bar\\")typedeflist<double(cpp.fixed_point=\\"16\\")>tiny_float_listenumweekdays{SUNDAY(weekend=\\"yes\\"),MONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY(weekend=\\"yes\\")}(foo.bar=\\"baz\\")senumseasons{\\"Spring\\",\\"Summer\\",\\"Fall\\",\\"Winter\\"}(foo=\\"bar\\")structostr_default{1:i32bar;}structostr_custom{1:i32bar;}(cpp.customostream)servicefoo_service{voidfoo()(foo=\\"bar\\")}(a.b=\\"c\\")servicedeprecate_everything{voidBar()(deprecated=\\"Fails to deliver ä¸­æ–‡ ÐºÐ¾Ð»Ð±Ð°ÑÐ°\\")voidBaz()(deprecated=\\"Need this to work with tabs (\\\\t) or Umlauts (Ã¤Ã¶Ã¼Ã„Ã–ÃœÃŸ) too\\")voidDeprecated()(deprecated)}<EOF> (typedeflist<i32>(cpp.template=\\"std::list\\")int_linked_list (typedeflist<i32>(cpp.template=\\"std::list\\")int_linked_list typedef (list<i32>(cpp.template=\\"std::list\\") (list<i32>(cpp.template=\\"std::list\\") (list<i32> list < (i32 (i32 (i32 i32))) >) ((cpp.template=\\"std::list\\") ( (cpp.template=\\"std::list\\" cpp.template = (\\"std::list\\" \\"std::list\\")) )))) int_linked_list)) (structfoo{1:i32bar(presence=\\"required\\");2:i32baz(presence=\\"manual\\",cpp.use_pointer=\\"\\",);3:i32qux;4:i32bop;}(cpp.type=\\"DenseFoo\\",python.type=\\"DenseFoo\\",java.final=\\"\\",annotation.without.value,) (structfoo{1:i32bar(presence=\\"required\\");2:i32baz(presence=\\"manual\\",cpp.use_pointer=\\"\\",);3:i32qux;4:i32bop;}(cpp.type=\\"DenseFoo\\",python.type=\\"DenseFoo\\",java.final=\\"\\",annotation.without.value,) struct foo { (1:i32bar(presence=\\"required\\"); (1: (1 1) :) (i32 (i32 (i32 i32))) bar ((presence=\\"required\\") ( (presence=\\"required\\" presence = (\\"required\\" \\"required\\")) )) (; ;)) (2:i32baz(presence=\\"manual\\",cpp.use_pointer=\\"\\",); (2: (2 2) :) (i32 (i32 (i32 i32))) baz ((presence=\\"manual\\",cpp.use_pointer=\\"\\",) ( (presence=\\"manual\\", presence = (\\"manual\\" \\"manual\\") (, ,)) (cpp.use_pointer=\\"\\", cpp.use_pointer = (\\"\\" \\"\\") (, ,)) )) (; ;)) (3:i32qux; (3: (3 3) :) (i32 (i32 (i32 i32))) qux (; ;)) (4:i32bop; (4: (4 4) :) (i32 (i32 (i32 i32))) bop (; ;)) } ((cpp.type=\\"DenseFoo\\",python.type=\\"DenseFoo\\",java.final=\\"\\",annotation.without.value,) ( (cpp.type=\\"DenseFoo\\", cpp.type = (\\"DenseFoo\\" \\"DenseFoo\\") (, ,)) (python.type=\\"DenseFoo\\", python.type = (\\"DenseFoo\\" \\"DenseFoo\\") (, ,)) (java.final=\\"\\", java.final = (\\"\\" \\"\\") (, ,)) (annotation.without.value, annotation.without.value (, ,)) )))) (exceptionfoo_error{1:i32error_code(foo=\\"bar\\")2:stringerror_msg}(foo=\\"bar\\") (exceptionfoo_error{1:i32error_code(foo=\\"bar\\")2:stringerror_msg}(foo=\\"bar\\") exception foo_error { (1:i32error_code(foo=\\"bar\\") (1: (1 1) :) (i32 (i32 (i32 i32))) error_code ((foo=\\"bar\\") ( (foo=\\"bar\\" foo = (\\"bar\\" \\"bar\\")) ))) (2:stringerror_msg (2: (2 2) :) (string (string (string string))) error_msg) } ((foo=\\"bar\\") ( (foo=\\"bar\\" foo = (\\"bar\\" \\"bar\\")) )))) (typedefstring(unicode.encoding=\\"UTF-16\\")non_latin_string(foo=\\"bar\\") (typedefstring(unicode.encoding=\\"UTF-16\\")non_latin_string(foo=\\"bar\\") typedef (string(unicode.encoding=\\"UTF-16\\") (string(unicode.encoding=\\"UTF-16\\") (string string) ((unicode.encoding=\\"UTF-16\\") ( (unicode.encoding=\\"UTF-16\\" unicode.encoding = (\\"UTF-16\\" \\"UTF-16\\")) )))) non_latin_string ((foo=\\"bar\\") ( (foo=\\"bar\\" foo = (\\"bar\\" \\"bar\\")) )))) (typedeflist<double(cpp.fixed_point=\\"16\\")>tiny_float_list (typedeflist<double(cpp.fixed_point=\\"16\\")>tiny_float_list typedef (list<double(cpp.fixed_point=\\"16\\")> (list<double(cpp.fixed_point=\\"16\\")> (list<double(cpp.fixed_point=\\"16\\")> list < (double(cpp.fixed_point=\\"16\\") (double(cpp.fixed_point=\\"16\\") (double double) ((cpp.fixed_point=\\"16\\") ( (cpp.fixed_point=\\"16\\" cpp.fixed_point = (\\"16\\" \\"16\\")) )))) >))) tiny_float_list)) (enumweekdays{SUNDAY(weekend=\\"yes\\"),MONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY(weekend=\\"yes\\")}(foo.bar=\\"baz\\") (enumweekdays{SUNDAY(weekend=\\"yes\\"),MONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY(weekend=\\"yes\\")}(foo.bar=\\"baz\\") enum weekdays { (SUNDAY(weekend=\\"yes\\"), SUNDAY ((weekend=\\"yes\\") ( (weekend=\\"yes\\" weekend = (\\"yes\\" \\"yes\\")) )) (, ,)) (MONDAY, MONDAY (, ,)) (TUESDAY, TUESDAY (, ,)) (WEDNESDAY, WEDNESDAY (, ,)) (THURSDAY, THURSDAY (, ,)) (FRIDAY, FRIDAY (, ,)) (SATURDAY(weekend=\\"yes\\") SATURDAY ((weekend=\\"yes\\") ( (weekend=\\"yes\\" weekend = (\\"yes\\" \\"yes\\")) ))) } ((foo.bar=\\"baz\\") ( (foo.bar=\\"baz\\" foo.bar = (\\"baz\\" \\"baz\\")) )))) (senumseasons{\\"Spring\\",\\"Summer\\",\\"Fall\\",\\"Winter\\"}(foo=\\"bar\\") (senumseasons{\\"Spring\\",\\"Summer\\",\\"Fall\\",\\"Winter\\"}(foo=\\"bar\\") senum seasons { \\"Spring\\" (, ,) \\"Summer\\" (, ,) \\"Fall\\" (, ,) \\"Winter\\" } ((foo=\\"bar\\") ( (foo=\\"bar\\" foo = (\\"bar\\" \\"bar\\")) )))) (structostr_default{1:i32bar;} (structostr_default{1:i32bar;} struct ostr_default { (1:i32bar; (1: (1 1) :) (i32 (i32 (i32 i32))) bar (; ;)) })) (structostr_custom{1:i32bar;}(cpp.customostream) (structostr_custom{1:i32bar;}(cpp.customostream) struct ostr_custom { (1:i32bar; (1: (1 1) :) (i32 (i32 (i32 i32))) bar (; ;)) } ((cpp.customostream) ( (cpp.customostream cpp.customostream) )))) (servicefoo_service{voidfoo()(foo=\\"bar\\")}(a.b=\\"c\\") (servicefoo_service{voidfoo()(foo=\\"bar\\")}(a.b=\\"c\\") service foo_service { (voidfoo()(foo=\\"bar\\") (void void) foo ( ) ((foo=\\"bar\\") ( (foo=\\"bar\\" foo = (\\"bar\\" \\"bar\\")) ))) } ((a.b=\\"c\\") ( (a.b=\\"c\\" a.b = (\\"c\\" \\"c\\")) )))) (servicedeprecate_everything{voidBar()(deprecated=\\"Fails to deliver ä¸­æ–‡ ÐºÐ¾Ð»Ð±Ð°ÑÐ°\\")voidBaz()(deprecated=\\"Need this to work with tabs (\\\\t) or Umlauts (Ã¤Ã¶Ã¼Ã„Ã–ÃœÃŸ) too\\")voidDeprecated()(deprecated)} (servicedeprecate_everything{voidBar()(deprecated=\\"Fails to deliver ä¸­æ–‡ ÐºÐ¾Ð»Ð±Ð°ÑÐ°\\")voidBaz()(deprecated=\\"Need this to work with tabs (\\\\t) or Umlauts (Ã¤Ã¶Ã¼Ã„Ã–ÃœÃŸ) too\\")voidDeprecated()(deprecated)} service deprecate_everything { (voidBar()(deprecated=\\"Fails to deliver ä¸­æ–‡ ÐºÐ¾Ð»Ð±Ð°ÑÐ°\\") (void void) Bar ( ) ((deprecated=\\"Fails to deliver ä¸­æ–‡ ÐºÐ¾Ð»Ð±Ð°ÑÐ°\\") ( (deprecated=\\"Fails to deliver ä¸­æ–‡ ÐºÐ¾Ð»Ð±Ð°ÑÐ°\\" deprecated = (\\"Fails to deliver ä¸­æ–‡ ÐºÐ¾Ð»Ð±Ð°ÑÐ°\\" \\"Fails to deliver ä¸­æ–‡ ÐºÐ¾Ð»Ð±Ð°ÑÐ°\\")) ))) (voidBaz()(deprecated=\\"Need this to work with tabs (\\\\t) or Umlauts (Ã¤Ã¶Ã¼Ã„Ã–ÃœÃŸ) too\\") (void void) Baz ( ) ((deprecated=\\"Need this to work with tabs (\\\\t) or Umlauts (Ã¤Ã¶Ã¼Ã„Ã–ÃœÃŸ) too\\") ( (deprecated=\\"Need this to work with tabs (\\\\t) or Umlauts (Ã¤Ã¶Ã¼Ã„Ã–ÃœÃŸ) too\\" deprecated = (\\"Need this to work with tabs (\\\\t) or Umlauts (Ã¤Ã¶Ã¼Ã„Ã–ÃœÃŸ) too\\" \\"Need this to work with tabs (\\\\t) or Umlauts (Ã¤Ã¶Ã¼Ã„Ã–ÃœÃŸ) too\\")) ))) (voidDeprecated()(deprecated) (void void) Deprecated ( ) ((deprecated) ( (deprecated deprecated) ))) })) <EOF>)"`;

exports[`Thrift Parser > load files 2`] = `"(namespacec_glibTTestnamespacecppthrift.testnamespacedelphiThrift.Testnamespacegothrifttestnamespacejavathrift.testnamespacejsThriftTestnamespaceluaThriftTestnamespacenetstdThriftTestnamespaceperlThriftTestnamespacephpThriftTestnamespacepyThriftTestnamespacepy.twistedThriftTestnamespacerbThrift.TestnamespacestThriftTestnamespacexsdtest(uri='http://thrift.apache.org/ns/ThriftTest')namespacenoexistThriftTestnamespacecpp.noexistThriftTestnamespace*thrift.testenumNumberz{ONE=1,TWO,THREE,FIVE=5,SIX,EIGHT=8}constNumberzmyNumberz=Numberz.ONE;typedefi64UserIdstructBonk{1:stringmessage,2:i32type}typedefmap<string,Bonk>MapTypestructBools{1:boolim_true,2:boolim_false,}structXtruct{1:stringstring_thing,4:i8byte_thing,9:i32i32_thing,11:i64i64_thing}structXtruct2{1:i8byte_thing,2:Xtructstruct_thing,3:i32i32_thing}structXtruct3{1:stringstring_thing,4:i32changed,9:i32i32_thing,11:i64i64_thing}structInsanity{1:map<Numberz,UserId>userMap,2:list<Xtruct>xtructs}(python.immutable=\\"\\")structCrazyNesting{1:stringstring_field,2:optionalset<Insanity>set_field,3:requiredlist<map<set<i32>(python.immutable=\\"\\"),map<i32,set<list<map<Insanity,string>(python.immutable=\\"\\")>(python.immutable=\\"\\")>>>>list_field,4:binarybinary_field}unionSomeUnion{1:map<Numberz,UserId>map_thing,2:stringstring_thing,3:i32i32_thing,4:Xtruct3xtruct_thing,5:Insanityinsanity_thing}exceptionXception{1:i32errorCode,2:stringmessage}exceptionXception2{1:i32errorCode,2:Xtructstruct_thing}structEmptyStruct{}structOneField{1:EmptyStructfield}serviceThriftTest{voidtestVoid(),stringtestString(1:stringthing),booltestBool(1:boolthing),i8testByte(1:i8thing),i32testI32(1:i32thing),i64testI64(1:i64thing),doubletestDouble(1:doublething),binarytestBinary(1:binarything),XtructtestStruct(1:Xtructthing),Xtruct2testNest(1:Xtruct2thing),map<i32,i32>testMap(1:map<i32,i32>thing),map<string,string>testStringMap(1:map<string,string>thing),set<i32>testSet(1:set<i32>thing),list<i32>testList(1:list<i32>thing),NumberztestEnum(1:Numberzthing),UserIdtestTypedef(1:UserIdthing),map<i32,map<i32,i32>>testMapMap(1:i32hello),map<UserId,map<Numberz,Insanity>>testInsanity(1:Insanityargument),XtructtestMulti(1:i8arg0,2:i32arg1,3:i64arg2,4:map<i16,string>arg3,5:Numberzarg4,6:UserIdarg5),voidtestException(1:stringarg)throws(1:Xceptionerr1),XtructtestMultiException(1:stringarg0,2:stringarg1)throws(1:Xceptionerr1,2:Xception2err2)onewayvoidtestOneway(1:i32secondsToSleep)}serviceSecondService{stringsecondtestString(1:stringthing)}structVersioningTestV1{1:i32begin_in_both,3:stringold_string,12:i32end_in_both}structVersioningTestV2{1:i32begin_in_both,2:i32newint,3:i8newbyte,4:i16newshort,5:i64newlong,6:doublenewdouble7:Bonknewstruct,8:list<i32>newlist,9:set<i32>newset,10:map<i32,i32>newmap,11:stringnewstring,12:i32end_in_both}structListTypeVersioningV1{1:list<i32>myints;2:stringhello;}structListTypeVersioningV2{1:list<string>strings;2:stringhello;}structGuessProtocolStruct{7:map<string,string>map_field,}structLargeDeltas{1:Boolsb1,10:Boolsb10,100:Boolsb100,500:boolcheck_true,1000:Boolsb1000,1500:boolcheck_false,2000:VersioningTestV2vertwo2000,2500:set<string>a_set2500,3000:VersioningTestV2vertwo3000,4000:list<i32>big_numbers}structNestedListsI32x2{1:list<list<i32>>integerlist}structNestedListsI32x3{1:list<list<list<i32>>>integerlist}structNestedMixedx2{1:list<set<i32>>int_set_list2:map<i32,set<string>>map_int_strset3:list<map<i32,set<string>>>map_int_strset_list}structListBonks{1:list<Bonk>bonk}structNestedListsBonk{1:list<list<list<Bonk>>>bonk}structBoolTest{1:optionalboolb=true;2:optionalstrings=\\"true\\";}structStructA{1:requiredstrings;}structStructB{1:optionalStructAaa;2:requiredStructAab;}structOptionalSetDefaultTest{1:optionalset<string>with_default=[\\"test\\"]}<EOF> (namespacec_glibTTest (namespacec_glibTTest namespace c_glib TTest)) (namespacecppthrift.test (namespacecppthrift.test namespace cpp thrift.test)) (namespacedelphiThrift.Test (namespacedelphiThrift.Test namespace delphi Thrift.Test)) (namespacegothrifttest (namespacegothrifttest namespace go thrifttest)) (namespacejavathrift.test (namespacejavathrift.test namespace java thrift.test)) (namespacejsThriftTest (namespacejsThriftTest namespace js ThriftTest)) (namespaceluaThriftTest (namespaceluaThriftTest namespace lua ThriftTest)) (namespacenetstdThriftTest (namespacenetstdThriftTest namespace netstd ThriftTest)) (namespaceperlThriftTest (namespaceperlThriftTest namespace perl ThriftTest)) (namespacephpThriftTest (namespacephpThriftTest namespace php ThriftTest)) (namespacepyThriftTest (namespacepyThriftTest namespace py ThriftTest)) (namespacepy.twistedThriftTest (namespacepy.twistedThriftTest namespace py.twisted ThriftTest)) (namespacerbThrift.Test (namespacerbThrift.Test namespace rb Thrift.Test)) (namespacestThriftTest (namespacestThriftTest namespace st ThriftTest)) (namespacexsdtest(uri='http://thrift.apache.org/ns/ThriftTest') (namespacexsdtest(uri='http://thrift.apache.org/ns/ThriftTest') namespace xsd test ((uri='http://thrift.apache.org/ns/ThriftTest') ( (uri='http://thrift.apache.org/ns/ThriftTest' uri = ('http://thrift.apache.org/ns/ThriftTest' 'http://thrift.apache.org/ns/ThriftTest')) )))) (namespacenoexistThriftTest (namespacenoexistThriftTest namespace noexist ThriftTest)) (namespacecpp.noexistThriftTest (namespacecpp.noexistThriftTest namespace cpp.noexist ThriftTest)) (namespace*thrift.test (namespace*thrift.test namespace * thrift.test)) (enumNumberz{ONE=1,TWO,THREE,FIVE=5,SIX,EIGHT=8} (enumNumberz{ONE=1,TWO,THREE,FIVE=5,SIX,EIGHT=8} enum Numberz { (ONE=1, ONE = (1 1) (, ,)) (TWO, TWO (, ,)) (THREE, THREE (, ,)) (FIVE=5, FIVE = (5 5) (, ,)) (SIX, SIX (, ,)) (EIGHT=8 EIGHT = (8 8)) })) (constNumberzmyNumberz=Numberz.ONE; (constNumberzmyNumberz=Numberz.ONE; const (Numberz Numberz) myNumberz = (Numberz.ONE Numberz.ONE) (; ;))) (typedefi64UserId (typedefi64UserId typedef (i64 (i64 (i64 i64))) UserId)) (structBonk{1:stringmessage,2:i32type} (structBonk{1:stringmessage,2:i32type} struct Bonk { (1:stringmessage, (1: (1 1) :) (string (string (string string))) message (, ,)) (2:i32type (2: (2 2) :) (i32 (i32 (i32 i32))) type) })) (typedefmap<string,Bonk>MapType (typedefmap<string,Bonk>MapType typedef (map<string,Bonk> (map<string,Bonk> (map<string,Bonk> map < (string (string (string string))) , (Bonk Bonk) >))) MapType)) (structBools{1:boolim_true,2:boolim_false,} (structBools{1:boolim_true,2:boolim_false,} struct Bools { (1:boolim_true, (1: (1 1) :) (bool (bool (bool bool))) im_true (, ,)) (2:boolim_false, (2: (2 2) :) (bool (bool (bool bool))) im_false (, ,)) })) (structXtruct{1:stringstring_thing,4:i8byte_thing,9:i32i32_thing,11:i64i64_thing} (structXtruct{1:stringstring_thing,4:i8byte_thing,9:i32i32_thing,11:i64i64_thing} struct Xtruct { (1:stringstring_thing, (1: (1 1) :) (string (string (string string))) string_thing (, ,)) (4:i8byte_thing, (4: (4 4) :) (i8 i8) byte_thing (, ,)) (9:i32i32_thing, (9: (9 9) :) (i32 (i32 (i32 i32))) i32_thing (, ,)) (11:i64i64_thing (11: (11 11) :) (i64 (i64 (i64 i64))) i64_thing) })) (structXtruct2{1:i8byte_thing,2:Xtructstruct_thing,3:i32i32_thing} (structXtruct2{1:i8byte_thing,2:Xtructstruct_thing,3:i32i32_thing} struct Xtruct2 { (1:i8byte_thing, (1: (1 1) :) (i8 i8) byte_thing (, ,)) (2:Xtructstruct_thing, (2: (2 2) :) (Xtruct Xtruct) struct_thing (, ,)) (3:i32i32_thing (3: (3 3) :) (i32 (i32 (i32 i32))) i32_thing) })) (structXtruct3{1:stringstring_thing,4:i32changed,9:i32i32_thing,11:i64i64_thing} (structXtruct3{1:stringstring_thing,4:i32changed,9:i32i32_thing,11:i64i64_thing} struct Xtruct3 { (1:stringstring_thing, (1: (1 1) :) (string (string (string string))) string_thing (, ,)) (4:i32changed, (4: (4 4) :) (i32 (i32 (i32 i32))) changed (, ,)) (9:i32i32_thing, (9: (9 9) :) (i32 (i32 (i32 i32))) i32_thing (, ,)) (11:i64i64_thing (11: (11 11) :) (i64 (i64 (i64 i64))) i64_thing) })) (structInsanity{1:map<Numberz,UserId>userMap,2:list<Xtruct>xtructs}(python.immutable=\\"\\") (structInsanity{1:map<Numberz,UserId>userMap,2:list<Xtruct>xtructs}(python.immutable=\\"\\") struct Insanity { (1:map<Numberz,UserId>userMap, (1: (1 1) :) (map<Numberz,UserId> (map<Numberz,UserId> (map<Numberz,UserId> map < (Numberz Numberz) , (UserId UserId) >))) userMap (, ,)) (2:list<Xtruct>xtructs (2: (2 2) :) (list<Xtruct> (list<Xtruct> (list<Xtruct> list < (Xtruct Xtruct) >))) xtructs) } ((python.immutable=\\"\\") ( (python.immutable=\\"\\" python.immutable = (\\"\\" \\"\\")) )))) (structCrazyNesting{1:stringstring_field,2:optionalset<Insanity>set_field,3:requiredlist<map<set<i32>(python.immutable=\\"\\"),map<i32,set<list<map<Insanity,string>(python.immutable=\\"\\")>(python.immutable=\\"\\")>>>>list_field,4:binarybinary_field} (structCrazyNesting{1:stringstring_field,2:optionalset<Insanity>set_field,3:requiredlist<map<set<i32>(python.immutable=\\"\\"),map<i32,set<list<map<Insanity,string>(python.immutable=\\"\\")>(python.immutable=\\"\\")>>>>list_field,4:binarybinary_field} struct CrazyNesting { (1:stringstring_field, (1: (1 1) :) (string (string (string string))) string_field (, ,)) (2:optionalset<Insanity>set_field, (2: (2 2) :) (optional optional) (set<Insanity> (set<Insanity> (set<Insanity> set < (Insanity Insanity) >))) set_field (, ,)) (3:requiredlist<map<set<i32>(python.immutable=\\"\\"),map<i32,set<list<map<Insanity,string>(python.immutable=\\"\\")>(python.immutable=\\"\\")>>>>list_field, (3: (3 3) :) (required required) (list<map<set<i32>(python.immutable=\\"\\"),map<i32,set<list<map<Insanity,string>(python.immutable=\\"\\")>(python.immutable=\\"\\")>>>> (list<map<set<i32>(python.immutable=\\"\\"),map<i32,set<list<map<Insanity,string>(python.immutable=\\"\\")>(python.immutable=\\"\\")>>>> (list<map<set<i32>(python.immutable=\\"\\"),map<i32,set<list<map<Insanity,string>(python.immutable=\\"\\")>(python.immutable=\\"\\")>>>> list < (map<set<i32>(python.immutable=\\"\\"),map<i32,set<list<map<Insanity,string>(python.immutable=\\"\\")>(python.immutable=\\"\\")>>> (map<set<i32>(python.immutable=\\"\\"),map<i32,set<list<map<Insanity,string>(python.immutable=\\"\\")>(python.immutable=\\"\\")>>> (map<set<i32>(python.immutable=\\"\\"),map<i32,set<list<map<Insanity,string>(python.immutable=\\"\\")>(python.immutable=\\"\\")>>> map < (set<i32>(python.immutable=\\"\\") (set<i32>(python.immutable=\\"\\") (set<i32> set < (i32 (i32 (i32 i32))) >) ((python.immutable=\\"\\") ( (python.immutable=\\"\\" python.immutable = (\\"\\" \\"\\")) )))) , (map<i32,set<list<map<Insanity,string>(python.immutable=\\"\\")>(python.immutable=\\"\\")>> (map<i32,set<list<map<Insanity,string>(python.immutable=\\"\\")>(python.immutable=\\"\\")>> (map<i32,set<list<map<Insanity,string>(python.immutable=\\"\\")>(python.immutable=\\"\\")>> map < (i32 (i32 (i32 i32))) , (set<list<map<Insanity,string>(python.immutable=\\"\\")>(python.immutable=\\"\\")> (set<list<map<Insanity,string>(python.immutable=\\"\\")>(python.immutable=\\"\\")> (set<list<map<Insanity,string>(python.immutable=\\"\\")>(python.immutable=\\"\\")> set < (list<map<Insanity,string>(python.immutable=\\"\\")>(python.immutable=\\"\\") (list<map<Insanity,string>(python.immutable=\\"\\")>(python.immutable=\\"\\") (list<map<Insanity,string>(python.immutable=\\"\\")> list < (map<Insanity,string>(python.immutable=\\"\\") (map<Insanity,string>(python.immutable=\\"\\") (map<Insanity,string> map < (Insanity Insanity) , (string (string (string string))) >) ((python.immutable=\\"\\") ( (python.immutable=\\"\\" python.immutable = (\\"\\" \\"\\")) )))) >) ((python.immutable=\\"\\") ( (python.immutable=\\"\\" python.immutable = (\\"\\" \\"\\")) )))) >))) >))) >))) >))) list_field (, ,)) (4:binarybinary_field (4: (4 4) :) (binary (binary (binary binary))) binary_field) })) (unionSomeUnion{1:map<Numberz,UserId>map_thing,2:stringstring_thing,3:i32i32_thing,4:Xtruct3xtruct_thing,5:Insanityinsanity_thing} (unionSomeUnion{1:map<Numberz,UserId>map_thing,2:stringstring_thing,3:i32i32_thing,4:Xtruct3xtruct_thing,5:Insanityinsanity_thing} union SomeUnion { (1:map<Numberz,UserId>map_thing, (1: (1 1) :) (map<Numberz,UserId> (map<Numberz,UserId> (map<Numberz,UserId> map < (Numberz Numberz) , (UserId UserId) >))) map_thing (, ,)) (2:stringstring_thing, (2: (2 2) :) (string (string (string string))) string_thing (, ,)) (3:i32i32_thing, (3: (3 3) :) (i32 (i32 (i32 i32))) i32_thing (, ,)) (4:Xtruct3xtruct_thing, (4: (4 4) :) (Xtruct3 Xtruct3) xtruct_thing (, ,)) (5:Insanityinsanity_thing (5: (5 5) :) (Insanity Insanity) insanity_thing) })) (exceptionXception{1:i32errorCode,2:stringmessage} (exceptionXception{1:i32errorCode,2:stringmessage} exception Xception { (1:i32errorCode, (1: (1 1) :) (i32 (i32 (i32 i32))) errorCode (, ,)) (2:stringmessage (2: (2 2) :) (string (string (string string))) message) })) (exceptionXception2{1:i32errorCode,2:Xtructstruct_thing} (exceptionXception2{1:i32errorCode,2:Xtructstruct_thing} exception Xception2 { (1:i32errorCode, (1: (1 1) :) (i32 (i32 (i32 i32))) errorCode (, ,)) (2:Xtructstruct_thing (2: (2 2) :) (Xtruct Xtruct) struct_thing) })) (structEmptyStruct{} (structEmptyStruct{} struct EmptyStruct { })) (structOneField{1:EmptyStructfield} (structOneField{1:EmptyStructfield} struct OneField { (1:EmptyStructfield (1: (1 1) :) (EmptyStruct EmptyStruct) field) })) (serviceThriftTest{voidtestVoid(),stringtestString(1:stringthing),booltestBool(1:boolthing),i8testByte(1:i8thing),i32testI32(1:i32thing),i64testI64(1:i64thing),doubletestDouble(1:doublething),binarytestBinary(1:binarything),XtructtestStruct(1:Xtructthing),Xtruct2testNest(1:Xtruct2thing),map<i32,i32>testMap(1:map<i32,i32>thing),map<string,string>testStringMap(1:map<string,string>thing),set<i32>testSet(1:set<i32>thing),list<i32>testList(1:list<i32>thing),NumberztestEnum(1:Numberzthing),UserIdtestTypedef(1:UserIdthing),map<i32,map<i32,i32>>testMapMap(1:i32hello),map<UserId,map<Numberz,Insanity>>testInsanity(1:Insanityargument),XtructtestMulti(1:i8arg0,2:i32arg1,3:i64arg2,4:map<i16,string>arg3,5:Numberzarg4,6:UserIdarg5),voidtestException(1:stringarg)throws(1:Xceptionerr1),XtructtestMultiException(1:stringarg0,2:stringarg1)throws(1:Xceptionerr1,2:Xception2err2)onewayvoidtestOneway(1:i32secondsToSleep)} (serviceThriftTest{voidtestVoid(),stringtestString(1:stringthing),booltestBool(1:boolthing),i8testByte(1:i8thing),i32testI32(1:i32thing),i64testI64(1:i64thing),doubletestDouble(1:doublething),binarytestBinary(1:binarything),XtructtestStruct(1:Xtructthing),Xtruct2testNest(1:Xtruct2thing),map<i32,i32>testMap(1:map<i32,i32>thing),map<string,string>testStringMap(1:map<string,string>thing),set<i32>testSet(1:set<i32>thing),list<i32>testList(1:list<i32>thing),NumberztestEnum(1:Numberzthing),UserIdtestTypedef(1:UserIdthing),map<i32,map<i32,i32>>testMapMap(1:i32hello),map<UserId,map<Numberz,Insanity>>testInsanity(1:Insanityargument),XtructtestMulti(1:i8arg0,2:i32arg1,3:i64arg2,4:map<i16,string>arg3,5:Numberzarg4,6:UserIdarg5),voidtestException(1:stringarg)throws(1:Xceptionerr1),XtructtestMultiException(1:stringarg0,2:stringarg1)throws(1:Xceptionerr1,2:Xception2err2)onewayvoidtestOneway(1:i32secondsToSleep)} service ThriftTest { (voidtestVoid(), (void void) testVoid ( ) (, ,)) (stringtestString(1:stringthing), (string (string (string (string string)))) testString ( (1:stringthing (1: (1 1) :) (string (string (string string))) thing) ) (, ,)) (booltestBool(1:boolthing), (bool (bool (bool (bool bool)))) testBool ( (1:boolthing (1: (1 1) :) (bool (bool (bool bool))) thing) ) (, ,)) (i8testByte(1:i8thing), (i8 (i8 i8)) testByte ( (1:i8thing (1: (1 1) :) (i8 i8) thing) ) (, ,)) (i32testI32(1:i32thing), (i32 (i32 (i32 (i32 i32)))) testI32 ( (1:i32thing (1: (1 1) :) (i32 (i32 (i32 i32))) thing) ) (, ,)) (i64testI64(1:i64thing), (i64 (i64 (i64 (i64 i64)))) testI64 ( (1:i64thing (1: (1 1) :) (i64 (i64 (i64 i64))) thing) ) (, ,)) (doubletestDouble(1:doublething), (double (double (double (double double)))) testDouble ( (1:doublething (1: (1 1) :) (double (double (double double))) thing) ) (, ,)) (binarytestBinary(1:binarything), (binary (binary (binary (binary binary)))) testBinary ( (1:binarything (1: (1 1) :) (binary (binary (binary binary))) thing) ) (, ,)) (XtructtestStruct(1:Xtructthing), (Xtruct (Xtruct Xtruct)) testStruct ( (1:Xtructthing (1: (1 1) :) (Xtruct Xtruct) thing) ) (, ,)) (Xtruct2testNest(1:Xtruct2thing), (Xtruct2 (Xtruct2 Xtruct2)) testNest ( (1:Xtruct2thing (1: (1 1) :) (Xtruct2 Xtruct2) thing) ) (, ,)) (map<i32,i32>testMap(1:map<i32,i32>thing), (map<i32,i32> (map<i32,i32> (map<i32,i32> (map<i32,i32> map < (i32 (i32 (i32 i32))) , (i32 (i32 (i32 i32))) >)))) testMap ( (1:map<i32,i32>thing (1: (1 1) :) (map<i32,i32> (map<i32,i32> (map<i32,i32> map < (i32 (i32 (i32 i32))) , (i32 (i32 (i32 i32))) >))) thing) ) (, ,)) (map<string,string>testStringMap(1:map<string,string>thing), (map<string,string> (map<string,string> (map<string,string> (map<string,string> map < (string (string (string string))) , (string (string (string string))) >)))) testStringMap ( (1:map<string,string>thing (1: (1 1) :) (map<string,string> (map<string,string> (map<string,string> map < (string (string (string string))) , (string (string (string string))) >))) thing) ) (, ,)) (set<i32>testSet(1:set<i32>thing), (set<i32> (set<i32> (set<i32> (set<i32> set < (i32 (i32 (i32 i32))) >)))) testSet ( (1:set<i32>thing (1: (1 1) :) (set<i32> (set<i32> (set<i32> set < (i32 (i32 (i32 i32))) >))) thing) ) (, ,)) (list<i32>testList(1:list<i32>thing), (list<i32> (list<i32> (list<i32> (list<i32> list < (i32 (i32 (i32 i32))) >)))) testList ( (1:list<i32>thing (1: (1 1) :) (list<i32> (list<i32> (list<i32> list < (i32 (i32 (i32 i32))) >))) thing) ) (, ,)) (NumberztestEnum(1:Numberzthing), (Numberz (Numberz Numberz)) testEnum ( (1:Numberzthing (1: (1 1) :) (Numberz Numberz) thing) ) (, ,)) (UserIdtestTypedef(1:UserIdthing), (UserId (UserId UserId)) testTypedef ( (1:UserIdthing (1: (1 1) :) (UserId UserId) thing) ) (, ,)) (map<i32,map<i32,i32>>testMapMap(1:i32hello), (map<i32,map<i32,i32>> (map<i32,map<i32,i32>> (map<i32,map<i32,i32>> (map<i32,map<i32,i32>> map < (i32 (i32 (i32 i32))) , (map<i32,i32> (map<i32,i32> (map<i32,i32> map < (i32 (i32 (i32 i32))) , (i32 (i32 (i32 i32))) >))) >)))) testMapMap ( (1:i32hello (1: (1 1) :) (i32 (i32 (i32 i32))) hello) ) (, ,)) (map<UserId,map<Numberz,Insanity>>testInsanity(1:Insanityargument), (map<UserId,map<Numberz,Insanity>> (map<UserId,map<Numberz,Insanity>> (map<UserId,map<Numberz,Insanity>> (map<UserId,map<Numberz,Insanity>> map < (UserId UserId) , (map<Numberz,Insanity> (map<Numberz,Insanity> (map<Numberz,Insanity> map < (Numberz Numberz) , (Insanity Insanity) >))) >)))) testInsanity ( (1:Insanityargument (1: (1 1) :) (Insanity Insanity) argument) ) (, ,)) (XtructtestMulti(1:i8arg0,2:i32arg1,3:i64arg2,4:map<i16,string>arg3,5:Numberzarg4,6:UserIdarg5), (Xtruct (Xtruct Xtruct)) testMulti ( (1:i8arg0, (1: (1 1) :) (i8 i8) arg0 (, ,)) (2:i32arg1, (2: (2 2) :) (i32 (i32 (i32 i32))) arg1 (, ,)) (3:i64arg2, (3: (3 3) :) (i64 (i64 (i64 i64))) arg2 (, ,)) (4:map<i16,string>arg3, (4: (4 4) :) (map<i16,string> (map<i16,string> (map<i16,string> map < (i16 (i16 (i16 i16))) , (string (string (string string))) >))) arg3 (, ,)) (5:Numberzarg4, (5: (5 5) :) (Numberz Numberz) arg4 (, ,)) (6:UserIdarg5 (6: (6 6) :) (UserId UserId) arg5) ) (, ,)) (voidtestException(1:stringarg)throws(1:Xceptionerr1), (void void) testException ( (1:stringarg (1: (1 1) :) (string (string (string string))) arg) ) (throws(1:Xceptionerr1) throws ( (1:Xceptionerr1 (1: (1 1) :) (Xception Xception) err1) )) (, ,)) (XtructtestMultiException(1:stringarg0,2:stringarg1)throws(1:Xceptionerr1,2:Xception2err2) (Xtruct (Xtruct Xtruct)) testMultiException ( (1:stringarg0, (1: (1 1) :) (string (string (string string))) arg0 (, ,)) (2:stringarg1 (2: (2 2) :) (string (string (string string))) arg1) ) (throws(1:Xceptionerr1,2:Xception2err2) throws ( (1:Xceptionerr1, (1: (1 1) :) (Xception Xception) err1 (, ,)) (2:Xception2err2 (2: (2 2) :) (Xception2 Xception2) err2) ))) (onewayvoidtestOneway(1:i32secondsToSleep) (oneway oneway) (void void) testOneway ( (1:i32secondsToSleep (1: (1 1) :) (i32 (i32 (i32 i32))) secondsToSleep) )) })) (serviceSecondService{stringsecondtestString(1:stringthing)} (serviceSecondService{stringsecondtestString(1:stringthing)} service SecondService { (stringsecondtestString(1:stringthing) (string (string (string (string string)))) secondtestString ( (1:stringthing (1: (1 1) :) (string (string (string string))) thing) )) })) (structVersioningTestV1{1:i32begin_in_both,3:stringold_string,12:i32end_in_both} (structVersioningTestV1{1:i32begin_in_both,3:stringold_string,12:i32end_in_both} struct VersioningTestV1 { (1:i32begin_in_both, (1: (1 1) :) (i32 (i32 (i32 i32))) begin_in_both (, ,)) (3:stringold_string, (3: (3 3) :) (string (string (string string))) old_string (, ,)) (12:i32end_in_both (12: (12 12) :) (i32 (i32 (i32 i32))) end_in_both) })) (structVersioningTestV2{1:i32begin_in_both,2:i32newint,3:i8newbyte,4:i16newshort,5:i64newlong,6:doublenewdouble7:Bonknewstruct,8:list<i32>newlist,9:set<i32>newset,10:map<i32,i32>newmap,11:stringnewstring,12:i32end_in_both} (structVersioningTestV2{1:i32begin_in_both,2:i32newint,3:i8newbyte,4:i16newshort,5:i64newlong,6:doublenewdouble7:Bonknewstruct,8:list<i32>newlist,9:set<i32>newset,10:map<i32,i32>newmap,11:stringnewstring,12:i32end_in_both} struct VersioningTestV2 { (1:i32begin_in_both, (1: (1 1) :) (i32 (i32 (i32 i32))) begin_in_both (, ,)) (2:i32newint, (2: (2 2) :) (i32 (i32 (i32 i32))) newint (, ,)) (3:i8newbyte, (3: (3 3) :) (i8 i8) newbyte (, ,)) (4:i16newshort, (4: (4 4) :) (i16 (i16 (i16 i16))) newshort (, ,)) (5:i64newlong, (5: (5 5) :) (i64 (i64 (i64 i64))) newlong (, ,)) (6:doublenewdouble (6: (6 6) :) (double (double (double double))) newdouble) (7:Bonknewstruct, (7: (7 7) :) (Bonk Bonk) newstruct (, ,)) (8:list<i32>newlist, (8: (8 8) :) (list<i32> (list<i32> (list<i32> list < (i32 (i32 (i32 i32))) >))) newlist (, ,)) (9:set<i32>newset, (9: (9 9) :) (set<i32> (set<i32> (set<i32> set < (i32 (i32 (i32 i32))) >))) newset (, ,)) (10:map<i32,i32>newmap, (10: (10 10) :) (map<i32,i32> (map<i32,i32> (map<i32,i32> map < (i32 (i32 (i32 i32))) , (i32 (i32 (i32 i32))) >))) newmap (, ,)) (11:stringnewstring, (11: (11 11) :) (string (string (string string))) newstring (, ,)) (12:i32end_in_both (12: (12 12) :) (i32 (i32 (i32 i32))) end_in_both) })) (structListTypeVersioningV1{1:list<i32>myints;2:stringhello;} (structListTypeVersioningV1{1:list<i32>myints;2:stringhello;} struct ListTypeVersioningV1 { (1:list<i32>myints; (1: (1 1) :) (list<i32> (list<i32> (list<i32> list < (i32 (i32 (i32 i32))) >))) myints (; ;)) (2:stringhello; (2: (2 2) :) (string (string (string string))) hello (; ;)) })) (structListTypeVersioningV2{1:list<string>strings;2:stringhello;} (structListTypeVersioningV2{1:list<string>strings;2:stringhello;} struct ListTypeVersioningV2 { (1:list<string>strings; (1: (1 1) :) (list<string> (list<string> (list<string> list < (string (string (string string))) >))) strings (; ;)) (2:stringhello; (2: (2 2) :) (string (string (string string))) hello (; ;)) })) (structGuessProtocolStruct{7:map<string,string>map_field,} (structGuessProtocolStruct{7:map<string,string>map_field,} struct GuessProtocolStruct { (7:map<string,string>map_field, (7: (7 7) :) (map<string,string> (map<string,string> (map<string,string> map < (string (string (string string))) , (string (string (string string))) >))) map_field (, ,)) })) (structLargeDeltas{1:Boolsb1,10:Boolsb10,100:Boolsb100,500:boolcheck_true,1000:Boolsb1000,1500:boolcheck_false,2000:VersioningTestV2vertwo2000,2500:set<string>a_set2500,3000:VersioningTestV2vertwo3000,4000:list<i32>big_numbers} (structLargeDeltas{1:Boolsb1,10:Boolsb10,100:Boolsb100,500:boolcheck_true,1000:Boolsb1000,1500:boolcheck_false,2000:VersioningTestV2vertwo2000,2500:set<string>a_set2500,3000:VersioningTestV2vertwo3000,4000:list<i32>big_numbers} struct LargeDeltas { (1:Boolsb1, (1: (1 1) :) (Bools Bools) b1 (, ,)) (10:Boolsb10, (10: (10 10) :) (Bools Bools) b10 (, ,)) (100:Boolsb100, (100: (100 100) :) (Bools Bools) b100 (, ,)) (500:boolcheck_true, (500: (500 500) :) (bool (bool (bool bool))) check_true (, ,)) (1000:Boolsb1000, (1000: (1000 1000) :) (Bools Bools) b1000 (, ,)) (1500:boolcheck_false, (1500: (1500 1500) :) (bool (bool (bool bool))) check_false (, ,)) (2000:VersioningTestV2vertwo2000, (2000: (2000 2000) :) (VersioningTestV2 VersioningTestV2) vertwo2000 (, ,)) (2500:set<string>a_set2500, (2500: (2500 2500) :) (set<string> (set<string> (set<string> set < (string (string (string string))) >))) a_set2500 (, ,)) (3000:VersioningTestV2vertwo3000, (3000: (3000 3000) :) (VersioningTestV2 VersioningTestV2) vertwo3000 (, ,)) (4000:list<i32>big_numbers (4000: (4000 4000) :) (list<i32> (list<i32> (list<i32> list < (i32 (i32 (i32 i32))) >))) big_numbers) })) (structNestedListsI32x2{1:list<list<i32>>integerlist} (structNestedListsI32x2{1:list<list<i32>>integerlist} struct NestedListsI32x2 { (1:list<list<i32>>integerlist (1: (1 1) :) (list<list<i32>> (list<list<i32>> (list<list<i32>> list < (list<i32> (list<i32> (list<i32> list < (i32 (i32 (i32 i32))) >))) >))) integerlist) })) (structNestedListsI32x3{1:list<list<list<i32>>>integerlist} (structNestedListsI32x3{1:list<list<list<i32>>>integerlist} struct NestedListsI32x3 { (1:list<list<list<i32>>>integerlist (1: (1 1) :) (list<list<list<i32>>> (list<list<list<i32>>> (list<list<list<i32>>> list < (list<list<i32>> (list<list<i32>> (list<list<i32>> list < (list<i32> (list<i32> (list<i32> list < (i32 (i32 (i32 i32))) >))) >))) >))) integerlist) })) (structNestedMixedx2{1:list<set<i32>>int_set_list2:map<i32,set<string>>map_int_strset3:list<map<i32,set<string>>>map_int_strset_list} (structNestedMixedx2{1:list<set<i32>>int_set_list2:map<i32,set<string>>map_int_strset3:list<map<i32,set<string>>>map_int_strset_list} struct NestedMixedx2 { (1:list<set<i32>>int_set_list (1: (1 1) :) (list<set<i32>> (list<set<i32>> (list<set<i32>> list < (set<i32> (set<i32> (set<i32> set < (i32 (i32 (i32 i32))) >))) >))) int_set_list) (2:map<i32,set<string>>map_int_strset (2: (2 2) :) (map<i32,set<string>> (map<i32,set<string>> (map<i32,set<string>> map < (i32 (i32 (i32 i32))) , (set<string> (set<string> (set<string> set < (string (string (string string))) >))) >))) map_int_strset) (3:list<map<i32,set<string>>>map_int_strset_list (3: (3 3) :) (list<map<i32,set<string>>> (list<map<i32,set<string>>> (list<map<i32,set<string>>> list < (map<i32,set<string>> (map<i32,set<string>> (map<i32,set<string>> map < (i32 (i32 (i32 i32))) , (set<string> (set<string> (set<string> set < (string (string (string string))) >))) >))) >))) map_int_strset_list) })) (structListBonks{1:list<Bonk>bonk} (structListBonks{1:list<Bonk>bonk} struct ListBonks { (1:list<Bonk>bonk (1: (1 1) :) (list<Bonk> (list<Bonk> (list<Bonk> list < (Bonk Bonk) >))) bonk) })) (structNestedListsBonk{1:list<list<list<Bonk>>>bonk} (structNestedListsBonk{1:list<list<list<Bonk>>>bonk} struct NestedListsBonk { (1:list<list<list<Bonk>>>bonk (1: (1 1) :) (list<list<list<Bonk>>> (list<list<list<Bonk>>> (list<list<list<Bonk>>> list < (list<list<Bonk>> (list<list<Bonk>> (list<list<Bonk>> list < (list<Bonk> (list<Bonk> (list<Bonk> list < (Bonk Bonk) >))) >))) >))) bonk) })) (structBoolTest{1:optionalboolb=true;2:optionalstrings=\\"true\\";} (structBoolTest{1:optionalboolb=true;2:optionalstrings=\\"true\\";} struct BoolTest { (1:optionalboolb=true; (1: (1 1) :) (optional optional) (bool (bool (bool bool))) b = (true true) (; ;)) (2:optionalstrings=\\"true\\"; (2: (2 2) :) (optional optional) (string (string (string string))) s = (\\"true\\" \\"true\\") (; ;)) })) (structStructA{1:requiredstrings;} (structStructA{1:requiredstrings;} struct StructA { (1:requiredstrings; (1: (1 1) :) (required required) (string (string (string string))) s (; ;)) })) (structStructB{1:optionalStructAaa;2:requiredStructAab;} (structStructB{1:optionalStructAaa;2:requiredStructAab;} struct StructB { (1:optionalStructAaa; (1: (1 1) :) (optional optional) (StructA StructA) aa (; ;)) (2:requiredStructAab; (2: (2 2) :) (required required) (StructA StructA) ab (; ;)) })) (structOptionalSetDefaultTest{1:optionalset<string>with_default=[\\"test\\"]} (structOptionalSetDefaultTest{1:optionalset<string>with_default=[\\"test\\"]} struct OptionalSetDefaultTest { (1:optionalset<string>with_default=[\\"test\\"] (1: (1 1) :) (optional optional) (set<string> (set<string> (set<string> set < (string (string (string string))) >))) with_default = ([\\"test\\"] ([\\"test\\"] [ (\\"test\\" \\"test\\") ]))) })) <EOF>)"`;

exports[`Thrift Parser > load files 3`] = `"(conststringdefault_user=\\"\\\\'default_user\\\\'\\";conststringdefault_name='\\"abc\\\\'s\\"';<EOF> (conststringdefault_user=\\"\\\\'default_user\\\\'\\"; (conststringdefault_user=\\"\\\\'default_user\\\\'\\"; const (string (string (string string))) default_user = (\\"\\\\'default_user\\\\'\\" \\"\\\\'default_user\\\\'\\") (; ;))) (conststringdefault_name='\\"abc\\\\'s\\"'; (conststringdefault_name='\\"abc\\\\'s\\"'; const (string (string (string string))) default_name = ('\\"abc\\\\'s\\"' '\\"abc\\\\'s\\"') (; ;))) <EOF>)"`;

exports[`Thrift Parser > load files 4`] = `"(namespacepysharedstructSharedStruct{1:i32key2:stringvalue}serviceSharedService{SharedStructgetStruct(1:i32key)}<EOF> (namespacepyshared (namespacepyshared namespace py shared)) (structSharedStruct{1:i32key2:stringvalue} (structSharedStruct{1:i32key2:stringvalue} struct SharedStruct { (1:i32key (1: (1 1) :) (i32 (i32 (i32 i32))) key) (2:stringvalue (2: (2 2) :) (string (string (string string))) value) })) (serviceSharedService{SharedStructgetStruct(1:i32key)} (serviceSharedService{SharedStructgetStruct(1:i32key)} service SharedService { (SharedStructgetStruct(1:i32key) (SharedStruct (SharedStruct SharedStruct)) getStruct ( (1:i32key (1: (1 1) :) (i32 (i32 (i32 i32))) key) )) })) <EOF>)"`;

exports[`Thrift Parser > load files 5`] = `"(include\\"shared.thrift\\"<EOF> (include\\"shared.thrift\\" (include\\"shared.thrift\\" include \\"shared.thrift\\")) <EOF>)"`;

exports[`Thrift Parser > load files 6`] = `"(include\\"shared.thrift\\"namespacepytutorialtypedefi32MyIntegerconsti32INT32CONSTANT=9853constmap<string,string>MAPCONSTANT={'hello':'world','goodnight':'moon'}constdoubleDOUBLE_CONSTANT=98.53333333222constdoubleDOUBLE_CONSTANT2=1.35E10enumOperation{ADD=1,SUBTRACT=2,MULTIPLY=3,DIVIDE=4;LESS=-1;}structWork{1:i32num1=0,2:i32num2,3:Operationop,4:optionalstringcomment,}exceptionInvalidOperation{1:i32whatOp,2:stringwhy=\\"ok? what the dog\\";}serviceCalculatorextendsshared.SharedService{voidping(),i32add(1:i32num1,2:i32num2),i32calculate(1:i32logid,2:Workw)throws(1:InvalidOperationouch),onewayvoidzip()}<EOF> (include\\"shared.thrift\\" (include\\"shared.thrift\\" include \\"shared.thrift\\")) (namespacepytutorial (namespacepytutorial namespace py tutorial)) (typedefi32MyInteger (typedefi32MyInteger typedef (i32 (i32 (i32 i32))) MyInteger)) (consti32INT32CONSTANT=9853 (consti32INT32CONSTANT=9853 const (i32 (i32 (i32 i32))) INT32CONSTANT = (9853 (9853 9853)))) (constmap<string,string>MAPCONSTANT={'hello':'world','goodnight':'moon'} (constmap<string,string>MAPCONSTANT={'hello':'world','goodnight':'moon'} const (map<string,string> (map<string,string> (map<string,string> map < (string (string (string string))) , (string (string (string string))) >))) MAPCONSTANT = ({'hello':'world','goodnight':'moon'} ({'hello':'world','goodnight':'moon'} { ('hello':'world', ('hello' 'hello') : ('world' 'world') (, ,)) ('goodnight':'moon' ('goodnight' 'goodnight') : ('moon' 'moon')) })))) (constdoubleDOUBLE_CONSTANT=98.53333333222 (constdoubleDOUBLE_CONSTANT=98.53333333222 const (double (double (double double))) DOUBLE_CONSTANT = (98.53333333222 98.53333333222))) (constdoubleDOUBLE_CONSTANT2=1.35E10 (constdoubleDOUBLE_CONSTANT2=1.35E10 const (double (double (double double))) DOUBLE_CONSTANT2 = (1.35E10 1.35E10))) (enumOperation{ADD=1,SUBTRACT=2,MULTIPLY=3,DIVIDE=4;LESS=-1;} (enumOperation{ADD=1,SUBTRACT=2,MULTIPLY=3,DIVIDE=4;LESS=-1;} enum Operation { (ADD=1, ADD = (1 1) (, ,)) (SUBTRACT=2, SUBTRACT = (2 2) (, ,)) (MULTIPLY=3, MULTIPLY = (3 3) (, ,)) (DIVIDE=4; DIVIDE = (4 4) (; ;)) (LESS=-1; LESS = (-1 -1) (; ;)) })) (structWork{1:i32num1=0,2:i32num2,3:Operationop,4:optionalstringcomment,} (structWork{1:i32num1=0,2:i32num2,3:Operationop,4:optionalstringcomment,} struct Work { (1:i32num1=0, (1: (1 1) :) (i32 (i32 (i32 i32))) num1 = (0 (0 0)) (, ,)) (2:i32num2, (2: (2 2) :) (i32 (i32 (i32 i32))) num2 (, ,)) (3:Operationop, (3: (3 3) :) (Operation Operation) op (, ,)) (4:optionalstringcomment, (4: (4 4) :) (optional optional) (string (string (string string))) comment (, ,)) })) (exceptionInvalidOperation{1:i32whatOp,2:stringwhy=\\"ok? what the dog\\";} (exceptionInvalidOperation{1:i32whatOp,2:stringwhy=\\"ok? what the dog\\";} exception InvalidOperation { (1:i32whatOp, (1: (1 1) :) (i32 (i32 (i32 i32))) whatOp (, ,)) (2:stringwhy=\\"ok? what the dog\\"; (2: (2 2) :) (string (string (string string))) why = (\\"ok? what the dog\\" \\"ok? what the dog\\") (; ;)) })) (serviceCalculatorextendsshared.SharedService{voidping(),i32add(1:i32num1,2:i32num2),i32calculate(1:i32logid,2:Workw)throws(1:InvalidOperationouch),onewayvoidzip()} (serviceCalculatorextendsshared.SharedService{voidping(),i32add(1:i32num1,2:i32num2),i32calculate(1:i32logid,2:Workw)throws(1:InvalidOperationouch),onewayvoidzip()} service Calculator extends shared.SharedService { (voidping(), (void void) ping ( ) (, ,)) (i32add(1:i32num1,2:i32num2), (i32 (i32 (i32 (i32 i32)))) add ( (1:i32num1, (1: (1 1) :) (i32 (i32 (i32 i32))) num1 (, ,)) (2:i32num2 (2: (2 2) :) (i32 (i32 (i32 i32))) num2) ) (, ,)) (i32calculate(1:i32logid,2:Workw)throws(1:InvalidOperationouch), (i32 (i32 (i32 (i32 i32)))) calculate ( (1:i32logid, (1: (1 1) :) (i32 (i32 (i32 i32))) logid (, ,)) (2:Workw (2: (2 2) :) (Work Work) w) ) (throws(1:InvalidOperationouch) throws ( (1:InvalidOperationouch (1: (1 1) :) (InvalidOperation InvalidOperation) ouch) )) (, ,)) (onewayvoidzip() (oneway oneway) (void void) zip ( )) })) <EOF>)"`;
